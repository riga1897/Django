Требования для кода в целом:
Дублирующегося кода быть не должно.
Оптимизация работы с БД - единое подключение.
Дополнительный функционал, не относящийся к Django может быть размещен в src и src/utils
Если он напрямую относится к логике проекта, то разместить его в модуле в src с распределениям по платформам или в общей, если функционал общий.
Если это вспомогательный код, то размещаем его в utils с аналогичным распределением
По возможности, создавать абстрактные классы с абстрактными методами
В абстрактных классах и методах не должно быть реализаций
flake8 не возвращает ошибки, все классы и методы и функции задокументированы на русском языке

Требования для тестов
Тесты не должны покрывать код более одного раза
Следуем иерархии от абстракции к реализации конфигурации, утилит и функционального кода
После этого выбираем модули с минимальным покрытием кода
Импорт классов и функций должен быть из реального кода, иначе не поучить покрытия 100%
Необходимо создавать тесты только для 100% покрытия фукционального кода, не усложняя их лишними проверками
Не должно быть запросов к реальным ресурсам и чтения из stdin
Консолидируй моки, вместо разбиения на операции.
Сделай упор на покрытие кода
Тесты, в которых сейчас нет ошибок пока не трогаем
Прежде чем создавать код, проверь, что он точно отсутствует в проекте, править код в целом - НЕЖЕЛАТЕЛЬНО
flake8 не возвращает ошибки, все классы и методы и функции задокументированы на русском языке

Создать модель User в apps/users/
Создать модели в apps/mailings/
Применить миграции
Создать сервисы на базе ядра

