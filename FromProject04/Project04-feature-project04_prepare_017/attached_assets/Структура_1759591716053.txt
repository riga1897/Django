üóÉÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–∏
–ü–æ–º–∏–º–æ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –∑–∞–¥–∞–Ω–∏–∏ —Å—É—â–Ω–æ—Å—Ç–µ–π, —Ç–µ–±–µ –º–æ–≥—É—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è:

–ü—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞: –†–∞—Å—à–∏—Ä—å –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –¥–æ–±–∞–≤–∏–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª–µ ¬´—É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞¬ª –∏–ª–∏ ¬´–æ—Ç–¥–µ–ª¬ª, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ª–æ–≥–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

–®–∞–±–ª–æ–Ω—ã –ø–∏—Å–µ–º: –í—ã–Ω–µ—Å–∏—Ç–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Ç–µ–∫—Å—Ç—ã –ø–∏—Å–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ) –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –º–æ–¥–µ–ª—å. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –±–µ–∑ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞.

–ö–∞—Ç–µ–≥–æ—Ä–∏–∏/–¢–µ–≥–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫: –ü–æ–∑–≤–æ–ª—è—é—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏.

–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π: –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª—é—á–µ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤—Ö–æ–¥, —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º). –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–ª–∞–¥–∫–∏.

üèóÔ∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
–ß—Ç–æ–±—ã –ø—Ä–æ–µ–∫—Ç –Ω–µ –ø—Ä–µ–≤—Ä–∞—Ç–∏–ª—Å—è –≤ ¬´—Å–ø–∞–≥–µ—Ç—Ç–∏-–∫–æ–¥¬ª, –æ—Å–æ–±–µ–Ω–Ω–æ —Å —É—á–µ—Ç–æ–º —Ç–∞–∫–∏—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π, –∫–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –ø—Ä–æ–¥—É–º–∞—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É. –í–æ—Ç –æ–¥–Ω–∞ –∏–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä:

text
your_project/                 # –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (maindir)
‚îú‚îÄ‚îÄ src/                     # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ config/              # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ (settings.py, urls.py)
‚îÇ   ‚îú‚îÄ‚îÄ apps/                # –í—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Django
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ users/           # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ mailings/        # –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫, —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–ª–∏–µ–Ω—Ç–æ–≤
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ .../
‚îÇ   ‚îú‚îÄ‚îÄ api/                 # API-—ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–µ—Å–ª–∏ –±—É–¥–µ—Ç REST API)
‚îÇ   ‚îú‚îÄ‚îÄ utils/               # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–¥ (—É—Ç–∏–ª–∏—Ç—ã, –∫–∞—Å—Ç–æ–º–Ω—ã–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã)
‚îÇ   ‚îî‚îÄ‚îÄ workers/             # –ó–∞–¥–∞—á–∏ –¥–ª—è Celery (–¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º)
‚îú‚îÄ‚îÄ docker/                  # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Docker
‚îú‚îÄ‚îÄ docs/                    # –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
‚îú‚îÄ‚îÄ .env.example             # –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
‚îú‚îÄ‚îÄ .gitignore
‚îú‚îÄ‚îÄ pyproject.toml/pipfile  # –§–∞–π–ª –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Poetry)
‚îî‚îÄ‚îÄ README.md
–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:

–†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏: –ù–µ –ø–æ–º–µ—â–∞–π—Ç–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –≤ —Å–ª–æ–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π. –í—ã–Ω–æ—Å–∏—Ç–µ –µ—ë –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏–ª–∏ –º–µ—Ç–æ–¥—ã –º–æ–¥–µ–ª–µ–π. –ù–∞–ø—Ä–∏–º–µ—Ä, –º–µ—Ç–æ–¥ send() —É –º–æ–¥–µ–ª–∏ ¬´–†–∞—Å—Å—ã–ª–∫–∞¬ª, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è ¬´–ü–æ–ø—ã—Ç–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏¬ª.

–ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≥—Ä—É–ø–ø –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Django –¥–ª—è —Ä–æ–ª–µ–π ¬´–ú–µ–Ω–µ–¥–∂–µ—Ä¬ª –∏ ¬´–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å¬ª. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —É–¥–æ–±–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ get_queryset() –≤ –∫–ª–∞—Å—Å–∞—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π.

‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ (–î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 1)
–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤–º–µ—Å—Ç–æ django-apscheduler —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–≤—è–∑–∫—É Celery + Celery Beat. –≠—Ç–æ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ.

–ü—Ä–∏–º–µ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å Celery:

–ó–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫ (–≤ workers/tasks.py):

python
from celery import shared_task
from django.utils import timezone
from apps.mailings.models import Mailing, MailingAttempt

@shared_task
def send_scheduled_mailings():
    now = timezone.now()
    # –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    active_mailings = Mailing.objects.filter(
        start_time__lte=now,
        end_time__gte=now,
        status='–ó–∞–ø—É—â–µ–Ω–∞'
    )
    for mailing in active_mailings:
        send_mailing.delay(mailing.id)

@shared_task
def send_mailing(mailing_id):
    mailing = Mailing.objects.get(id=mailing_id)
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
    for client in mailing.recipients.all():
        try:
            # ... –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ (send_mail) ...
            status = '–£—Å–ø–µ—à–Ω–æ'
            server_response = '200 OK'
        except Exception as e:
            status = '–ù–µ —É—Å–ø–µ—à–Ω–æ'
            server_response = str(e)
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø—ã—Ç–∫–µ
        MailingAttempt.objects.create(
            mailing=mailing,
            status=status,
            server_response=server_response
        )
–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è Celery Beat, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç send_scheduled_mailings –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.

üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
–î–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö:

–°–µ—Ä–≤–µ—Ä–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: –ù–∞—Å—Ç—Ä–æ–π –±—ç–∫–µ–Ω–¥ –≤ settings.py. –î–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –ª—É—á—à–∏–π –≤—ã–±–æ—Ä ‚Äî Redis.

python
# –ü—Ä–∏–º–µ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redis –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∫—ç—à–∞:cite[10]
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
    }
}
–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–π: –ó–∞–∫—ç—à–∏—Ä—É–π –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –º–µ–Ω—è—Ç—å—Å—è –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏.

python
from django.views.decorators.cache import cache_page

@cache_page(60 * 5)  # –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
def home(request):
    # ... –ª–æ–≥–∏–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ...
–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤: –ï—Å–ª–∏ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—á–Ω—ã–π –±–ª–æ–∫, –µ–≥–æ —Ç–æ–∂–µ –º–æ–∂–Ω–æ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞—Ç—å.

html
{% load cache %}
{% cache 500 sidebar %}
    ... —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–∞–π–¥–±–∞—Ä–∞ ...
{% endcache %}
üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–î–æ–ø. –∑–∞–¥–∞–Ω–∏–µ 2)
–ù–∞—Å—Ç—Ä–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ settings.py, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

python
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/path/to/your/django/debug.log',
        },
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'apps.mailings': {  # –õ–æ–≥–≥–µ—Ä –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            'handlers': ['file', 'console'],
            'level': 'INFO',
        },
        'django.request': { # –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—à–∏–±–æ–∫ Django
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': False,
        },
    },
}
–õ–æ–≥–∏—Ä—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: –∑–∞–ø—É—Å–∫/–æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏, –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏, –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–ù–∞–¥–µ—é—Å—å, —ç—Ç–∏ –∏–¥–µ–∏ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ä–æ—à–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ –∫–∞–∫–æ–π-–ª–∏–±–æ –∏–∑ –∞—Å–ø–µ–∫—Ç–æ–≤, –¥–∞–π –∑–Ω–∞—Ç—å. –£–¥–∞—á–∏

–í—ã–¥–µ–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞
–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π - –∫–ª—é—á –∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ. –í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–æ–∑–¥–∞—Ç—å:

üèóÔ∏è 1. –ë–∞–∑–æ–≤—ã–µ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
AbstractBaseModel
python
from django.db import models
from django.utils import timezone

class AbstractBaseModel(models.Model):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å –æ–±—â–∏–º–∏ –ø–æ–ª—è–º–∏"""
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    updated_at = models.DateTimeField(auto_now=True, verbose_name="–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
    is_active = models.BooleanField(default=True, verbose_name="–ê–∫—Ç–∏–≤–µ–Ω")

    class Meta:
        abstract = True

class OwnedModel(AbstractBaseModel):
    """–ú–æ–¥–µ–ª—å —Å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º - –¥–ª—è —Ä–∞–∑–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    owner = models.ForeignKey(
        'users.User', 
        on_delete=models.CASCADE, 
        verbose_name="–í–ª–∞–¥–µ–ª–µ—Ü"
    )

    class Meta:
        abstract = True
üéØ 2. –°–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–ª–∞—Å—Å—ã (Service Layer)
MailingService
python
from abc import ABC, abstractmethod
from django.utils import timezone

class BaseMailingService(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
    
    @abstractmethod
    def create_mailing(self, mailing_data, owner):
        pass
    
    @abstractmethod
    def send_mailing(self, mailing_id):
        pass
    
    @abstractmethod
    def get_mailing_statistics(self, mailing_id):
        pass

class MailingService(BaseMailingService):
    """–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    def __init__(self, email_backend=None, cache_backend=None):
        self.email_backend = email_backend
        self.cache_backend = cache_backend
    
    def create_mailing(self, mailing_data, owner):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π"""
        # –í–∞–ª–∏–¥–∞—Ü–∏—è, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤, —Å–æ–∑–¥–∞–Ω–∏–µ
        pass
    
    def send_mailing(self, mailing_id):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        pass
    
    def get_user_mailings(self, user):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤"""
        if user.is_manager:
            return Mailing.objects.all()
        return Mailing.objects.filter(owner=user)
EmailService
python
class EmailService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å email-—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, backend=None):
        self.backend = backend
    
    def send_email(self, subject, body, recipient_list, template_name=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —à–∞–±–ª–æ–Ω–æ–≤"""
        pass
    
    def prepare_email_context(self, mailing, client):
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ –ø–∏—Å—å–º–∞"""
        return {
            'client': client,
            'mailing': mailing,
            'unsubscribe_url': self.generate_unsubscribe_url(client)
        }
üîê 3. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
PermissionManager
python
class BasePermissionManager(ABC):
    """–ë–∞–∑–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    
    @abstractmethod
    def can_view(self, user, obj):
        pass
    
    @abstractmethod
    def can_edit(self, user, obj):
        pass
    
    @abstractmethod
    def can_delete(self, user, obj):
        pass

class MailingPermissionManager(BasePermissionManager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–∞–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    def can_view(self, user, mailing):
        if user.is_superuser:
            return True
        if user.is_manager:
            return True
        return mailing.owner == user
    
    def can_edit(self, user, mailing):
        if user.is_manager and not mailing.owner == user:
            return False  # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –Ω–µ –º–æ–≥—É—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —á—É–∂–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        return mailing.owner == user
    
    def can_delete(self, user, mailing):
        return self.can_edit(user, mailing)

# –§–∞–±—Ä–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∞–≤
class PermissionManagerFactory:
    @staticmethod
    def get_manager(model_class):
        if model_class == Mailing:
            return MailingPermissionManager()
        elif model_class == Client:
            return ClientPermissionManager()
        # ...
üíæ 4. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
CacheService
python
from django.core.cache import cache

class CacheService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫—ç—à–µ–º"""
    
    def __init__(self, prefix="mailing_service"):
        self.prefix = prefix
    
    def get_mailing_stats_key(self, user_id):
        return f"{self.prefix}:stats:{user_id}"
    
    def cache_mailing_statistics(self, user, statistics):
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
        key = self.get_mailing_stats_key(user.id)
        cache.set(key, statistics, timeout=300)  # 5 –º–∏–Ω—É—Ç
    
    def get_cached_statistics(self, user):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        key = self.get_mailing_stats_key(user.id)
        return cache.get(key)

class CacheMixin:
    """–ú–∏–∫—Å–∏–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å–µ—Ä–≤–∏—Å—ã"""
    
    def __init__(self, *args, **kwargs):
        self.cache_service = CacheService()
        super().__init__(*args, **kwargs)
üìä 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
StatisticsService
python
class StatisticsCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    
    def calculate_user_statistics(self, user):
        """–†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        mailings = Mailing.objects.filter(owner=user)
        
        return {
            'total_mailings': mailings.count(),
            'active_mailings': mailings.filter(status='–ó–∞–ø—É—â–µ–Ω–∞').count(),
            'successful_attempts': MailingAttempt.objects.filter(
                mailing__owner=user, status='–£—Å–ø–µ—à–Ω–æ'
            ).count(),
            'failed_attempts': MailingAttempt.objects.filter(
                mailing__owner=user, status='–ù–µ —É—Å–ø–µ—à–Ω–æ'
            ).count(),
        }

class ReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á–µ—Ç–æ–≤"""
    
    def generate_detailed_report(self, user, date_from, date_to):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        pass
    
    def generate_summary_report(self, user):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        pass
üîÑ 6. –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–¥–µ–ª–µ–π (Custom Managers)
UserRelatedManager
python
class UserRelatedManager(models.Manager):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    
    def for_user(self, user):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        if user.is_superuser or user.is_manager:
            return self.get_queryset()
        return self.get_queryset().filter(owner=user)

class ActiveManager(UserRelatedManager):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"""
    
    def get_queryset(self):
        return super().get_queryset().filter(is_active=True)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –º–æ–¥–µ–ª—è—Ö
class Mailing(OwnedModel):
    objects = UserRelatedManager()
    active = ActiveManager()
    
    # –ø–æ–ª—è –º–æ–¥–µ–ª–∏...
üé® 7. –§–∞–±—Ä–∏–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
MailingFactory
python
class MailingFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    @staticmethod
    def create_scheduled_mailing(owner, message, clients, schedule_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        mailing = Mailing.objects.create(
            owner=owner,
            message=message,
            start_time=schedule_data['start_time'],
            end_time=schedule_data['end_time'],
            status='–°–æ–∑–¥–∞–Ω–∞'
        )
        mailing.recipients.set(clients)
        return mailing
    
    @staticmethod
    def create_immediate_mailing(owner, subject, body, clients):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        message = Message.objects.create(
            owner=owner,
            subject=subject,
            body=body
        )
        # ... —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
üöÄ 8. –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
EmailBackend
python
from abc import ABC, abstractmethod

class EmailBackend(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –±—ç–∫–µ–Ω–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
    
    @abstractmethod
    def send(self, to_email, subject, body, html_body=None):
        pass
    
    @abstractmethod
    def send_bulk(self, emails_data):
        pass

class SMTPEmailBackend(EmailBackend):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è SMTP"""
    pass

class SendGridBackend(EmailBackend):
    """–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è SendGrid API"""
    pass
üí° –ö–∞–∫ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–µ:
python
# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏
class MailingCreateView(CreateView):
    model = Mailing
    form_class = MailingForm
    
    def form_valid(self, form):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        mailing_service = MailingService()
        mailing = mailing_service.create_mailing(
            mailing_data=form.cleaned_data,
            owner=self.request.user
        )
        
        # –ö—ç—à–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        cache_service = CacheService()
        stats = statistics_service.calculate_user_statistics(self.request.user)
        cache_service.cache_mailing_statistics(self.request.user, stats)
        
        return super().form_valid(form)
–≠—Ç–∏ –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ –ø–æ–º–æ–≥—É—Ç —Ç–µ–±–µ:

‚úÖ –†–∞–∑–¥–µ–ª–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏

‚úÖ –£–ø—Ä–æ—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–º–æ–∂–Ω–æ –º–æ–∫–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã)

‚úÖ –õ–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å

‚úÖ –°–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID

‚úÖ –£–ø—Ä–∞–≤–ª—è—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å—é –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏

–ö–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞? –ù—É–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —Ä–∞—Å–∫—Ä—ã—Ç—å –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –∫–ª–∞—Å—Å–æ–≤?

–°—Ç–æ–∏—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Pydantic, —Ñ–∞–±—Ä–∏–∫—É –∫–ª–∞—Å—Å–æ–≤?
–û—Ç–ª–∏—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É:

ü§î Pydantic –≤ Django –ø—Ä–æ–µ–∫—Ç–µ
–°—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ —Å —É–º–æ–º –∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö.

‚úÖ –ì–¥–µ Pydantic –æ—á–µ–Ω—å –ø–æ–ª–µ–∑–µ–Ω:
python
# schemas.py
from pydantic import BaseModel, EmailStr, validator
from typing import List, Optional
from datetime import datetime

class ClientCreateSchema(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    email: EmailStr
    full_name: str
    comment: Optional[str] = None
    
    @validator('full_name')
    def validate_full_name(cls, v):
        if len(v.strip()) < 2:
            raise ValueError('Full name must be at least 2 characters')
        return v.strip()

class MailingCreateSchema(BaseModel):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    start_time: datetime
    end_time: datetime
    message_id: int
    recipient_ids: List[int]
    
    @validator('end_time')
    def validate_dates(cls, v, values):
        if 'start_time' in values and v <= values['start_time']:
            raise ValueError('End time must be after start time')
        return v

class MailingStatisticsSchema(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è API"""
    total_mailings: int
    active_mailings: int
    unique_clients: int
    success_rate: float

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–∏—Å–∞—Ö
class MailingService:
    def create_mailing(self, mailing_data: dict, owner: User) -> Mailing:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
        schema = MailingCreateSchema(**mailing_data)
        validated_data = schema.dict()
        
        # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        mailing = Mailing.objects.create(
            owner=owner,
            **validated_data
        )
        return mailing
‚ùå –ì–¥–µ –ù–ï —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Pydantic:
Django Forms - –æ–Ω–∏ —É–∂–µ —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è

–ú–æ–¥–µ–ª–∏ Django - –∏—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Django –≤–∞–ª–∏–¥–∞—Ç–æ—Ä—ã

–ü—Ä–æ—Å—Ç—ã–µ DTO - –µ—Å–ª–∏ –Ω–µ—Ç —Å–ª–æ–∂–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏

üéØ –õ—É—á—à–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è Pydantic:
API —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è (–µ—Å–ª–∏ –±—É–¥–µ—Ç REST API)

–°–ª–æ–∂–Ω–∞—è –±–∏–∑–Ω–µ—Å-–≤–∞–ª–∏–¥–∞—Ü–∏—è

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã

üè≠ –§–∞–±—Ä–∏–∫–∞ –∫–ª–∞—Å—Å–æ–≤
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Å—Ç–æ–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –Ω–æ —Ç–æ–∂–µ –≤—ã–±–æ—Ä–æ—á–Ω–æ.

‚úÖ –û—Ç–ª–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏ –¥–ª—è —Ñ–∞–±—Ä–∏–∫:
python
# factories.py
from abc import ABC, abstractmethod
from typing import Type

class EmailBackendFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–µ–Ω–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–∫–∏ email"""
    
    _backends = {}
    
    @classmethod
    def register_backend(cls, name: str, backend_class: Type[EmailBackend]):
        cls._backends[name] = backend_class
    
    @classmethod
    def create_backend(cls, name: str, **kwargs) -> EmailBackend:
        if name not in cls._backends:
            raise ValueError(f"Unknown backend: {name}")
        return cls._backends[name](**kwargs)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—ç–∫–µ–Ω–¥–æ–≤
EmailBackendFactory.register_backend('smtp', SMTPEmailBackend)
EmailBackendFactory.register_backend('sendgrid', SendGridBackend)
EmailBackendFactory.register_backend('mailgun', MailgunBackend)

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
backend = EmailBackendFactory.create_backend(
    'sendgrid',
    api_key=settings.SENDGRID_API_KEY
)
‚úÖ –§–∞–±—Ä–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤:
python
class ServiceFactory:
    """–§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏"""
    
    def __init__(self):
        self._cache_service = CacheService()
        self._email_backend = EmailBackendFactory.create_backend(
            settings.EMAIL_BACKEND
        )
    
    def create_mailing_service(self) -> MailingService:
        return MailingService(
            email_backend=self._email_backend,
            cache_service=self._cache_service,
            permission_manager=PermissionManagerFactory.get_manager(Mailing)
        )
    
    def create_statistics_service(self) -> StatisticsService:
        return StatisticsService(
            cache_service=self._cache_service
        )

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
factory = ServiceFactory()
mailing_service = factory.create_mailing_service()
stats_service = factory.create_statistics_service()
‚úÖ –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Ä–∞—Å—Å—ã–ª–æ–∫:
python
class MailingStrategyFactory:
    """–§–∞–±—Ä–∏–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    
    @staticmethod
    def create_strategy(mailing_type: str) -> MailingStrategy:
        strategies = {
            'immediate': ImmediateMailingStrategy,
            'scheduled': ScheduledMailingStrategy,
            'recurring': RecurringMailingStrategy,
            'triggered': TriggeredMailingStrategy,
        }
        
        if mailing_type not in strategies:
            raise ValueError(f"Unknown mailing type: {mailing_type}")
        
        return strategies[mailing_type]()
‚ùå –ò–∑–±—ã—Ç–æ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ñ–∞–±—Ä–∏–∫:
python
# –ù–ï –¢–ê–ö - –∏–∑–±—ã—Ç–æ—á–Ω–æ
class SimpleObjectFactory:
    def create_user(self, email, name):
        return User(email=email, name=name)

# –¢–ê–ö - –ø—Ä–æ—â–µ –∏ –ø–æ–Ω—è—Ç–Ω–µ–µ
user = User.objects.create(email=email, name=name)
üéØ –ú–æ–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞:
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π Pydantic –¥–ª—è:
–í–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–¥–∞—á–µ–π –≤ —Å–µ—Ä–≤–∏—Å—ã

–°—Ö–µ–º API –µ—Å–ª–∏ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å REST API

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –æ—Ç—á–µ—Ç–æ–≤ - –∏–¥–µ–∞–ª—å–Ω–æ –ª–æ–∂–∏—Ç—Å—è –Ω–∞ Pydantic

python
# –•–æ—Ä–æ—à–∏–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
class MailingReportService:
    def generate_report(self, user_id: int, period: dict) -> MailingReportSchema:
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        raw_data = self._collect_raw_data(user_id, period)
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Pydantic
        report_data = MailingReportSchema(**raw_data)
        
        return report_data
‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π —Ñ–∞–±—Ä–∏–∫–∏ –¥–ª—è:
–°–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–µ–Ω–¥–æ–≤ (email, –∫—ç—à, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞)

–°—Ç—Ä–∞—Ç–µ–≥–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Ä–∞—Å—Å—ã–ª–æ–∫)

–°–µ—Ä–≤–∏—Å–æ–≤ —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏

‚ùå –ù–µ —É—Å–ª–æ–∂–Ω—è–π:
–ü—Ä–æ—Å—Ç—ã–µ CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏

–ë–∞–∑–æ–≤—ã–µ –º–æ–¥–µ–ª–∏ Django

–ü—Ä–æ—Å—Ç—ã–µ —Ñ–æ—Ä–º—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏

üì¶ –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ–µ–∫—Ç:
python
# structure.py
# services/mailing_service.py
class MailingService:
    def __init__(self, email_backend: EmailBackend, cache_service: CacheService):
        self.email_backend = email_backend
        self.cache_service = cache_service
    
    def create_mailing(self, create_data: MailingCreateSchema) -> Mailing:
        # Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è
        validated_data = create_data.dict()
        
        # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
        mailing = Mailing.objects.create(**validated_data)
        
        # –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.cache_service.invalidate_user_stats(mailing.owner_id)
        
        return mailing

# factories/service_factory.py
class ServiceFactory:
    def create_mailing_service(self) -> MailingService:
        email_backend = EmailBackendFactory.create_backend(
            settings.EMAIL_BACKEND_TYPE
        )
        return MailingService(
            email_backend=email_backend,
            cache_service=CacheService()
        )

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ view
def create_mailing_view(request):
    factory = ServiceFactory()
    mailing_service = factory.create_mailing_service()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
    try:
        mailing_data = MailingCreateSchema(**request.POST.dict())
    except ValidationError as e:
        return render_error(e.errors())
    
    mailing = mailing_service.create_mailing(mailing_data)
    return redirect('mailing_detail', mailing.id)
üéØ –ò—Ç–æ–≥–æ–≤—ã–π –≤–µ—Ä–¥–∏–∫—Ç:
–î–∞, –∏—Å–ø–æ–ª—å–∑—É–π –æ–±–∞ –ø–æ–¥—Ö–æ–¥–∞, –Ω–æ:

Pydantic - –¥–ª—è —Å–ª–æ–∂–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö

–§–∞–±—Ä–∏–∫–∏ - –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–µ–π—Å—Ç–≤ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

–≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –∫–æ–¥ –±–æ–ª–µ–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–º, —Ä–∞—Å—à–∏—Ä—è–µ–º—ã–º –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ —É—Å–ª–æ–∂–Ω–µ–Ω–∏—è.

–ö–∞–∫ —Ç—É—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API?
–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í –º–æ–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—è–≤–Ω–æ, –Ω–æ –¥–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º, –∫–∞–∫ –∏ –≥–¥–µ –æ–Ω –º–æ–∂–µ—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –≤ —Ç–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ —Ä–∞—Å—Å—ã–ª–æ–∫.

üéØ –£—Ä–æ–≤–Ω–∏ API –≤ –ø—Ä–æ–µ–∫—Ç–µ
1. Internal API (–°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π)
python
# services/mailing_service.py
class MailingService:
    """–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
    
    def create_mailing(self, mailing_data: MailingCreateSchema) -> Mailing:
        """API –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
        pass
    
    def send_mailing(self, mailing_id: int) -> bool:
        """API –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        pass
    
    def get_statistics(self, user_id: int) -> MailingStatsSchema:
        """API –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        pass

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
mailing_service = MailingService()

# –í–Ω—É—Ç—Ä–∏ Django View
def mailing_create_view(request):
    data = MailingCreateSchema(**request.POST.dict())
    mailing = mailing_service.create_mailing(data)  # ‚Üê Internal API call
2. REST API –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
python
# api/serializers.py (–∏—Å–ø–æ–ª—å–∑—É—è Pydantic)
from pydantic import BaseModel

class ClientCreateRequest(BaseModel):
    email: str
    full_name: str
    comment: str = ""

class MailingResponse(BaseModel):
    id: int
    status: str
    created_at: datetime
    message_subject: str

# api/views.py
from django.http import JsonResponse
from django.views import View

class ClientAPIView(View):
    """REST API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏"""
    
    def post(self, request):
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
            client_data = ClientCreateRequest(**request.json())
            
            # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
            client_service = ClientService()
            client = client_service.create_client(client_data.dict())
            
            # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Pydantic —Å—Ö–µ–º—É
            response_data = ClientResponse(**client.__dict__)
            return JsonResponse(response_data.dict(), status=201)
            
        except ValidationError as e:
            return JsonResponse({"errors": e.errors()}, status=400)
3. API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
python
# external/email_api.py
class EmailServiceAPI:
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ email-—Å–µ—Ä–≤–∏—Å–∞–º–∏"""
    
    def __init__(self, provider: str):
        self.provider = provider
        self.base_url = self._get_provider_url(provider)
    
    def send_email(self, to: str, subject: str, body: str) -> SendResult:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ email —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API"""
        payload = {
            "to": to,
            "subject": subject,
            "body": body,
            "from": "noreply@myservice.com"
        }
        
        response = requests.post(
            f"{self.base_url}/send",
            json=payload,
            headers={"Authorization": f"Bearer {self.api_key}"}
        )
        return SendResult(**response.json())

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–µ—Ä–≤–∏—Å–µ —Ä–∞—Å—Å—ã–ª–æ–∫
class MailingService:
    def __init__(self):
        self.email_api = EmailServiceAPI(provider="sendgrid")
    
    def send_to_client(self, client: Client, message: Message) -> bool:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
        try:
            result = self.email_api.send_email(
                to=client.email,
                subject=message.subject,
                body=message.body
            )
            return result.success
        except APIException as e:
            logger.error(f"Email API error: {e}")
            return False
üöÄ –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–∞—è REST API —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
API Endpoints:
python
# api/urls.py
from django.urls import path
from . import views

urlpatterns = [
    # Clients API
    path('api/v1/clients/', views.ClientListCreateAPI.as_view(), name='api-clients'),
    path('api/v1/clients/<int:pk>/', views.ClientRetrieveUpdateAPI.as_view(), name='api-client-detail'),
    
    # Mailings API
    path('api/v1/mailings/', views.MailingListCreateAPI.as_view(), name='api-mailings'),
    path('api/v1/mailings/<int:pk>/', views.MailingRetrieveUpdateAPI.as_view(), name='api-mailing-detail'),
    path('api/v1/mailings/<int:pk>/send/', views.MailingSendAPI.as_view(), name='api-mailing-send'),
    
    # Statistics API
    path('api/v1/statistics/', views.StatisticsAPI.as_view(), name='api-statistics'),
    path('api/v1/statistics/user/<int:user_id>/', views.UserStatisticsAPI.as_view(), name='api-user-statistics'),
]
API Views —Å Pydantic:
python
# api/views.py
class MailingListCreateAPI(View):
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
    
    def get(self, request):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
        service = MailingService()
        mailings = service.get_user_mailings(request.user)
        
        # –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Pydantic
        mailing_list = [MailingResponse.from_orm(m) for m in mailings]
        return JsonResponse([m.dict() for m in mailing_list], safe=False)
    
    def post(self, request):
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ API
        try:
            mailing_data = MailingCreateRequest(**request.json())
            service = MailingService()
            mailing = service.create_mailing(mailing_data.dict(), request.user)
            
            return JsonResponse(
                MailingResponse.from_orm(mailing).dict(),
                status=201
            )
        except ValidationError as e:
            return JsonResponse({"errors": e.errors()}, status=400)
API –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤:
python
# api/manager_views.py
class ManagerStatisticsAPI(View):
    """API –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def get(self, request):
        if not request.user.is_manager:
            return JsonResponse({"error": "Forbidden"}, status=403)
        
        stats_service = StatisticsService()
        period = self._get_period_from_request(request)
        
        statistics = stats_service.get_global_statistics(period)
        response_data = GlobalStatisticsResponse(**statistics)
        
        return JsonResponse(response_data.dict())
üîÑ –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–º–µ—Å—Ç–µ
Flow —á–µ—Ä–µ–∑ API:
text
Frontend/Client 
    ‚Üí Django REST API (Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è) 
    ‚Üí Service Layer (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞) 
    ‚Üí External APIs (Email, SMS) 
    ‚Üí Database
–ü—Ä–∏–º–µ—Ä –ø–æ–ª–Ω–æ–≥–æ flow:
python
# 1. –ö–ª–∏–µ–Ω—Ç –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API
POST /api/v1/mailings/
{
    "start_time": "2024-01-20T10:00:00",
    "end_time": "2024-01-21T10:00:00", 
    "message_id": 1,
    "recipient_ids": [1, 2, 3]
}

# 2. API View –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
class MailingCreateAPI(View):
    def post(self, request):
        # Pydantic –≤–∞–ª–∏–¥–∞—Ü–∏—è
        create_request = MailingCreateRequest(**request.json())
        
        # –°–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π (–±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞)
        mailing_service = ServiceFactory.create_mailing_service()
        mailing = mailing_service.create_mailing(
            create_request.dict(), 
            request.user
        )
        
        # –í–Ω–µ—à–Ω–∏–π API –≤—ã–∑–æ–≤
        if mailing.status == "–ó–∞–ø—É—â–µ–Ω–∞":
            mailing_service.schedule_mailing(mailing.id)
        
        # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Pydantic
        return JsonResponse(
            MailingDetailResponse.from_orm(mailing).dict()
        )
üõ† –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Ç–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ
–î–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
python
# –¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ Django Views –¥–ª—è HTML
def mailing_list_view(request):
    """–û–±—ã—á–Ω—ã–µ views –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    mailings = Mailing.objects.for_user(request.user)
    return render(request, 'mailings/list.html', {'mailings': mailings})
–î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/–≤–Ω–µ—à–Ω–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:
python
# API Views –¥–ª—è JSON
class MailingListAPI(View):
    def get(self, request):
        """API –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        service = MailingService()
        mailings = service.get_user_mailings(request.user)
        
        return JsonResponse({
            'mailings': [m.to_dict() for m in mailings],
            'pagination': {...}
        })
–î–ª—è –∞–¥–º–∏–Ω–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:
python
# API –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
class ManagerDashboardAPI(View):
    def get(self, request):
        if not request.user.is_manager:
            return JsonResponse({"error": "Forbidden"}, status=403)
        
        dashboard_service = DashboardService()
        data = dashboard_service.get_manager_dashboard()
        
        return JsonResponse(ManagerDashboardResponse(**data).dict())
üéØ –ß—Ç–æ —Ç–µ–±–µ —Å—Ç–æ–∏—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å:
Internal API (—Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π) - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏

REST API –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π - –µ—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

API –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö email-—Å–µ—Ä–≤–∏—Å–æ–≤ - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º

Pydantic —Å—Ö–µ–º—ã –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –æ—Ç—á–µ—Ç—ã

‚ùì –ù—É–∂–Ω–æ –ª–∏ —Ç–µ–±–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ REST API?
–î–∞, –µ—Å–ª–∏:

–ü–ª–∞–Ω–∏—Ä—É–µ—à—å –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

–•–æ—á–µ—à—å SPA (React/Vue) —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥

–ù—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

–ú–æ–∂–Ω–æ –æ—Ç–ª–æ–∂–∏—Ç—å, –µ—Å–ª–∏:

–¢–æ–ª—å–∫–æ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π Django HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

–ù–µ—Ç –≤–Ω–µ—à–Ω–∏—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π

–ù–æ —Å–µ—Ä–≤–∏—Å–Ω—ã–π —Å–ª–æ–π (internal API) —Å—Ç–æ–∏—Ç —Å–¥–µ–ª–∞—Ç—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ - —ç—Ç–æ —Å–∏–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É!

–ß—Ç–æ —Å–∫–∞–∂–µ—à—å? –ù—É–∂–Ω–æ –ª–∏ —Ç–µ–±–µ REST API –∏–ª–∏ –ø–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ internal API?

–ß—Ç–æ —Ç–∞–∫–æ–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏ –∫–∞–∫ –µ—ë –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤ —ç—Ç–æ–º –ø—Ä–æ–µ–∫—Ç–µ?
–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ - —ç—Ç–æ "–º–æ–∑–≥" –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–≤ —Ç–≤–æ–µ–º —Å–ª—É—á–∞–µ - —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å—Å—ã–ª–æ–∫).

üß† –ß—Ç–æ —Ç–∞–∫–æ–µ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞?
–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:

–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏?

–ö–æ–≥–¥–∞ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏?

–ü—Ä–∏ –∫–∞–∫–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö?

–ö–∞–∫–∏–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–±–ª—é–¥–∞—Ç—å—Å—è?

‚ùå –ë–µ–∑ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ (–ø–ª–æ—Ö–æ):
python
# views.py - –ª–æ–≥–∏–∫–∞ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ (–∞–Ω—Ç–∏–ø–∞—Ç—Ç–µ—Ä–Ω)
def create_mailing(request):
    if request.method == 'POST':
        mailing = Mailing.objects.create(
            start_time=request.POST['start_time'],
            end_time=request.POST['end_time'],
            status='–°–æ–∑–¥–∞–Ω–∞'
        )
        # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–±—Ä–æ—Å–∞–Ω—ã –ø–æ –∫–æ–¥—É
        if mailing.start_time > timezone.now():
            mailing.status = '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞'
        mailing.save()
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–¥–µ-—Ç–æ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        send_mailing.delay(mailing.id)
‚úÖ –° –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π (—Ö–æ—Ä–æ—à–æ):
python
# services/mailing_service.py - –ª–æ–≥–∏–∫–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞
class MailingService:
    def create_mailing(self, data, user):
        # –í–°–Ø –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
        self._validate_mailing_data(data)
        mailing = self._create_mailing_object(data, user)
        self._apply_business_rules(mailing)
        self._schedule_if_needed(mailing)
        return mailing
üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ –≤ —Ç–≤–æ–µ–º –ø—Ä–æ–µ–∫—Ç–µ
1. –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
python
class MailingValidator:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –¥–ª—è –±–∏–∑–Ω–µ—Å–∞"""
    
    @staticmethod
    def validate_mailing_times(start_time, end_time, user):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"""
        if end_time <= start_time:
            raise ValidationError("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞")
        
        if start_time < timezone.now():
            raise ValidationError("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –ø—Ä–æ—à–ª–æ–º")
        
        # –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_mailings = Mailing.objects.filter(
            owner=user, 
            status='–ó–∞–ø—É—â–µ–Ω–∞'
        ).count()
        if active_mailings >= user.mailing_limit:
            raise ValidationError("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")

    @staticmethod
    def validate_recipients(recipients, user):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –ø–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º"""
        if not recipients:
            raise ValidationError("–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—å")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        user_recipient_ids = set(Recipient.objects.filter(
            owner=user
        ).values_list('id', flat=True))
        
        provided_ids = set(recipients)
        if not provided_ids.issubset(user_recipient_ids):
            raise ValidationError("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –≤–∞–º")
2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
python
class MailingStatusManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    @staticmethod
    def update_mailing_status(mailing):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º"""
        now = timezone.now()
        
        if mailing.status == '–°–æ–∑–¥–∞–Ω–∞' and mailing.start_time <= now:
            mailing.status = '–ó–∞–ø—É—â–µ–Ω–∞'
            mailing.save()
            MailingExecutor.start_mailing(mailing)
        
        elif mailing.status == '–ó–∞–ø—É—â–µ–Ω–∞' and mailing.end_time <= now:
            mailing.status = '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'
            mailing.save()
            MailingExecutor.stop_mailing(mailing)
    
    @staticmethod
    def can_user_modify_mailing(mailing, user):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        if mailing.status == '–ó–∞–≤–µ—Ä—à–µ–Ω–∞':
            return False, "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"
        
        if mailing.status == '–ó–∞–ø—É—â–µ–Ω–∞' and not user.is_manager:
            return False, "–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"
        
        return True, ""
3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
python
class MailingExecutor:
    """–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å —Ä–∞—Å—Å—ã–ª–æ–∫ —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π"""
    
    @classmethod
    def send_mailing(cls, mailing):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —É—á–µ—Ç–æ–º –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        if not cls._can_send_mailing(mailing):
            cls._create_failed_attempt(mailing, "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return False
        
        # –õ–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        successful_sends = 0
        for recipient in mailing.recipients.all():
            try:
                if cls._send_to_recipient(mailing, recipient):
                    successful_sends += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        
        # –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–æ: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        cls._update_mailing_stats(mailing, successful_sends)
        return successful_sends > 0
    
    @staticmethod
    def _can_send_mailing(mailing):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"""
        return (
            mailing.status == '–ó–∞–ø—É—â–µ–Ω–∞' and
            mailing.start_time <= timezone.now() <= mailing.end_time and
            mailing.recipients.exists()
        )
4. –°–∏—Å—Ç–µ–º–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
python
class UserLimitsService:
    """–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    @staticmethod
    def check_mailing_limits(user, new_mailing_data=None):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        limits = {
            'max_daily_mailings': 50,
            'max_recipients_per_mailing': 1000,
            'max_active_mailings': 10
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        active_count = Mailing.objects.filter(
            owner=user, 
            status='–ó–∞–ø—É—â–µ–Ω–∞'
        ).count()
        if active_count >= limits['max_active_mailings']:
            raise BusinessException("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞
        today_mailings = Mailing.objects.filter(
            owner=user,
            created_at__date=timezone.now().date()
        ).count()
        if today_mailings >= limits['max_daily_mailings']:
            raise BusinessException("–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç —Ä–∞—Å—Å—ã–ª–æ–∫")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
        if (new_mailing_data and 
            len(new_mailing_data.get('recipients', [])) > limits['max_recipients_per_mailing']):
            raise BusinessException("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –æ–¥–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ")
5. –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
python
class ManagerBusinessService:
    """–ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"""
    
    @staticmethod
    def block_user(user, manager, reason):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        if not manager.is_manager:
            raise PermissionError("–¢–æ–ª—å–∫–æ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –º–æ–≥—É—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        if user.is_superuser:
            raise BusinessException("–ù–µ–ª—å–∑—è –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        
        # –ë–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–æ: –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        active_mailings = Mailing.objects.filter(owner=user, status='–ó–∞–ø—É—â–µ–Ω–∞')
        for mailing in active_mailings:
            mailing.status = '–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞'
            mailing.save()
            logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ {mailing.id} –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        user.is_active = False
        user.block_reason = reason
        user.blocked_by = manager
        user.blocked_at = timezone.now()
        user.save()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        NotificationService.send_user_blocked_notification(user, manager, reason)
    
    @staticmethod
    def get_suspicious_users():
        """–ü–æ–∏—Å–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª–∞–º"""
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–æ–ª—å—à–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        return User.objects.annotate(
            failure_rate=Count('mailing__attempts', filter=Q(mailing__attempts__status='–ù–µ —É—Å–ø–µ—à–Ω–æ')) / 
                         Count('mailing__attempts')
        ).filter(
            failure_rate__gt=0.7,  # 70% –Ω–µ—É–¥–∞—á–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
            is_active=True
        )
üèóÔ∏è –ö–∞–∫ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –≤ –ø—Ä–æ–µ–∫—Ç–µ
–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Å–ª–æ—è:
text
services/
‚îú‚îÄ‚îÄ mailing/
‚îÇ   ‚îú‚îÄ‚îÄ validator.py          # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
‚îÇ   ‚îú‚îÄ‚îÄ status_manager.py     # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞–º–∏
‚îÇ   ‚îú‚îÄ‚îÄ executor.py           # –ò—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–æ–∫
‚îÇ   ‚îî‚îÄ‚îÄ limits_service.py     # –õ–∏–º–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
‚îú‚îÄ‚îÄ user/
‚îÇ   ‚îú‚îÄ‚îÄ registration.py       # –õ–æ–≥–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
‚îÇ   ‚îú‚îÄ‚îÄ limits.py            # –õ–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îÇ   ‚îî‚îÄ‚îÄ manager.py           # –õ–æ–≥–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
‚îú‚îÄ‚îÄ statistics/
‚îÇ   ‚îú‚îÄ‚îÄ calculator.py        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
‚îÇ   ‚îî‚îÄ‚îÄ reporter.py          # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
‚îî‚îÄ‚îÄ notification/
    ‚îú‚îÄ‚îÄ email_sender.py      # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    ‚îî‚îÄ‚îÄ template_manager.py  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è—Ö:
python
# views.py
class MailingCreateView(CreateView):
    def form_valid(self, form):
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–∞–≤–∏–ª
            MailingValidator.validate_mailing_times(
                form.cleaned_data['start_time'],
                form.cleaned_data['end_time'], 
                self.request.user
            )
            
            UserLimitsService.check_mailing_limits(
                self.request.user, 
                form.cleaned_data
            )
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            mailing_service = MailingService()
            mailing = mailing_service.create_mailing(
                form.cleaned_data, 
                self.request.user
            )
            
            messages.success(self.request, "–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
            return redirect('mailing_detail', pk=mailing.pk)
            
        except BusinessException as e:
            form.add_error(None, str(e))
            return self.form_invalid(form)
üéØ –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —Ç–∞–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞:
–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å - –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –ª–µ–≥–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å

–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ - –ª–æ–≥–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç

–ü–æ–¥–¥–µ—Ä–∂–∫–∞ - –ø—Ä–∞–≤–∏–ª–∞ —Å–æ–±—Ä–∞–Ω—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ

–ì–∏–±–∫–æ—Å—Ç—å - –ª–µ–≥–∫–æ –º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è views

üìù –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏:
python
# tests/test_mailing_business_logic.py
class TestMailingBusinessLogic(TestCase):
    def test_mailing_time_validation(self):
        with self.assertRaises(ValidationError):
            MailingValidator.validate_mailing_times(
                start_time=timezone.now() + timedelta(days=2),
                end_time=timezone.now() + timedelta(days=1),  # –û—à–∏–±–∫–∞ - –∫–æ–Ω–µ—Ü —Ä–∞–Ω—å—à–µ –Ω–∞—á–∞–ª–∞
                user=self.user
            )
    
    def test_user_limits(self):
        # –°–æ–∑–¥–∞–µ–º 10 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
        for i in range(10):
            MailingFactory(owner=self.user, status='–ó–∞–ø—É—â–µ–Ω–∞')
        
        with self.assertRaises(BusinessException):
            UserLimitsService.check_mailing_limits(self.user)