Задание
Сдайте еще 3 домашек для допуска к выполнению работы. Сейчас вы можете ознакомиться с заданием.
Курсовая работа состоит из двух частей. Первая часть, «Разработка сервиса», вам открылась в конце курса «Основы Django». Если вы уже выполнили эту часть, то сразу приступайте ко второй — «Расширение функционала».

Если вы еще не начинали работу над курсовым проектом, тогда выполняйте первую часть, а затем переходите ко второй.

Удачи!

В первой части проекта нужно создать структуру, реализовать интерфейс шаблонов, выполнить настройку моделей и создание CRUD-операций.

Во второй части необходимо расширить функциональность на основе уже написанного кода и собранного интерфейса, добавить новые возможности, такие как формы, аутентификация, права доступа и кеширование.

Критерии оценки
Наставник примет вашу работу, если в ней соблюдаются следующие условия. Проверьте работу по критериям перед тем, как отправить ее.


Посмотреть критерии
 Общие критерии проекта
Решение выложено на GitHub.
В проекте есть файл 
.gitignore
.
В коммиты не добавлены игнорируемые файлы.
В проекте есть файл с зависимостями.
Файл с зависимостями содержит только необходимые для работы программы библиотеки.
При проверке линтером Flake8 обнаружено не более 5 ошибок.
Проект соответствует структуре проектов Django.
Созданы отдельные приложения для пользователей и рассылок.
Настройки приложения лежат в корне проекта в папке 
config
 или папке с названием проекта.
Произведены базовые настройки проекта.
Все необходимые данные вынесены в переменные окружения.
Корректно собран шаблон файла 
.env
.
 Модели
Произведены базовые настройки модели рассылки.
Модель рассылки cодержит все необходимые по ТЗ поля.
В файле 
models.py
 приложения рассылок создана модель рассылки.
Поля модели рассылки реализованы в соответствующих типах.
В репозиторий запушены миграции для модели рассылки.
В файле 
models.py
 приложения рассылок создана модель сообщения.
Произведены базовые настройки модели сообщения.
Модель сообщения cодержит все необходимые по ТЗ поля.
Поля модели сообщения реализованы в соответствующих типах.
В репозиторий запушены миграции для модели сообщения.
В файле 
models.py
 приложения рассылок создана модель получателя рассылки.
Произведены базовые настройки модели получателя рассылки.
Модель получателя рассылки cодержит все необходимые по ТЗ поля.
Поля модели получателя рассылки реализованы в соответствующих типах.
В репозиторий запушены миграции для модели получателя рассылки.
Связи между моделями построены согласно ТЗ.
В приложении пользователя реализована модель пользователя.
Модель пользователя отнаследована от 
AbstractUser
.
В модель пользователя добавлены поля email, аватар, номер телефона, страна в соответствующих типах.
В модели пользователя переопределено поле авторизации на email.
Произведены базовые настройки модели пользователя.
В репозиторий запушены миграции для приложения пользователя.
В настройках проекта заменена 
AUTH_USER_MODEL
 на текущую созданную.
В файле 
models.py
 приложения рассылок создана модель попытки рассылки.
Произведены базовые настройки модели попытки рассылки.
Модель попытки рассылки cодержит все необходимые по ТЗ поля.
Поля модели попытки рассылки реализованы в соответствующих типах.
В репозиторий запушены миграции для модели попытки рассылки.
 Контроллеры и шаблоны
Реализован контроллер регистрации пользователя в сервисе.
Реализован контроллер аутентификации пользователя в сервисе.
Реализован контроллер выхода пользователя в сервисе.
Реализован контроллер просмотра профиля пользователя в сервисе.
Реализован контроллер редактирования профиля пользователя в сервисе.
Созданы контроллеры СRUD-операций для сообщений.
Созданы шаблоны для контроллеров СRUD-операций для сообщений.
Шаблоны для работы с сообщениями используют базовый шаблон / подшаблоны.
Контроллеры CRUD-операций сообщений зарегистрированы на корректные URL.
Созданы контроллеры СRUD-операций для получателей рассылки.
Созданы шаблоны для контроллеров СRUD-операций для получателей рассылки.
Шаблоны для работы с получателями рассылки используют базовый шаблон / подшаблоны.
Контроллеры CRUD-операций клиентов зарегистрированы на корректные URL.
Созданы контроллеры СRUD-операций для рассылок.
Созданы шаблоны для контроллеров СRUD-операций для рассылок.
Шаблоны для работы с рассылками используют базовый шаблон / подшаблоны.
Контроллеры CRUD-операций рассылок зарегистрированы на корректные URL.
 Интерфейс
В интерфейс добавлена кнопка «Вход» для взаимодействия с контроллерами.
В интерфейс добавлена кнопка «Выход» для взаимодействия с контроллерами.
В интерфейс добавлена кнопка «Регистрация» для взаимодействия с контроллерами.
После авторизации пользователя кнопка «Вход» заменяется на «Выход».
После авторизации пользователя кнопка «Регистрация» исчезает.
На главной странице выводится необходимая информация по ТЗ.
В шаблон главной страницы передается контекст с необходимыми данными по ТЗ.
Шаблон главной страницы отображает данные корректно.
Выделены отдельные страницы для получателей рассылки, сообщений и рассылок.
В хедере есть кнопки перехода по соответствующим разделам.
Кнопки перехода открыты только авторизованным пользователям.
На страницах сообщений, рассылок и получателей рассылки есть кнопки создания, изменения и удаления.
Кнопки ведут на верные URL.
Выделена отдельная страница для попыток рассылок.
В хедере есть кнопка перехода на страницу попыток рассылки.
Кнопка перехода открыта только авторизованным пользователям.
Кнопки ведут на верные URL.
 Права доступа
В модели рассылок в класс 
Meta
 добавлены права для менеджеров согласно ТЗ.
В модели сообщений в класс 
Meta
 добавлены права для менеджеров согласно ТЗ.
В модели получателей рассылки в класс 
Meta
 добавлены права для менеджеров согласно ТЗ.
Создана группа «Менеджеры».
Создана команда для наполнения базы данных группой «Менеджеры».
В контроллере создания рассылки, получателя рассылки и сообщения переопределен метод 
fom_valid()
, в котором при создании сущности в поле 
owner
 прописывается текущий пользователь.
В модели рассылки, получателя рассылки и сообщения добавлено поле «Владелец», если не было добавлено ранее.
Каждый пользователь имеет доступ только к своим рассылкам.
Каждый пользователь имеет доступ только к своим получателям рассылки.
Реализованы проверки в шаблонах для ограничения доступа к сущностям.
В контроллерах переопределены QuerySet’ы для фильтрации по владельцам.
 Кеширование
Настроено серверное кеширование.
 Рассылки
Собрана страница с отчетами по рассылке каждого пользователя.
Реализована отправка рассылки через интерфейс.
Реализована отправка рассылки через командную строку (кастомной командой).

Чтобы удержать текущих клиентов бизнеса, часто используются вспомогательные, или «прогревающие», рассылки для информирования и привлечения.

В этом проекте вам нужно разработать сервис управления рассылками, администрирования и получения статистики.

Техническое задание на разработку веб-приложения с рассылкой сообщений
Создать веб-приложение на Django, которое позволяет пользователям управлять рассылками сообщений для клиентов. Приложение должно включать функциональность для создания, просмотра, редактирования и удаления рассылок, а также отправки сообщений по требованию.

Прежде чем приступить к написанию кода, ознакомьтесь со всеми условиями проекта (часть 1 и часть 2) и по возможности выполните декомпозицию.

ЧАСТЬ 1. Разработка сервиса
1. Управление клиентами
Реализовать возможность добавлять, просматривать, редактировать и удалять получателей рассылки (клиентов).

Модель «Получатель рассылки»:

Email (строка, уникальное).
Ф. И. О. (строка).
Комментарий (текст).
2. Управление сообщениями
Реализовать возможность добавлять, просматривать, редактировать и удалять сообщения.

Модель «Сообщение»:

Тема письма (строка).
Тело письма (текст).
3. Управление рассылками
Реализовать возможность добавлять, просматривать, редактировать и удалять рассылки.

Статусы рассылки:

Создана — рассылка была создана, но еще ни разу не была отправлена.
Запущена — рассылка активна и была отправлена хотя бы один раз.
Завершена — время окончания отправки рассылки прошло.
Модель «Рассылка»:

Дата и время первой отправки (datetime).
Дата и время окончания отправки (datetime).
Статус (строка: 
'Завершена'
, 
'Создана'
, 
'Запущена'
).
Сообщение (внешний ключ на модель «Сообщение»).
Получатели («многие ко многим», связь с моделью «Получатель»).
4. Отправка сообщений по требованию
Реализовать возможность отправки рассылки вручную через интерфейс пользователя и командную строку.

5. Попытки рассылок
Для каждой попытки отправки рассылки должны сохраняться следующие данные: дата и время попытки, статус (успешно / не успешно), ответ почтового сервера.


Логика работы попытки рассылки
Попытка рассылки — это запись о каждой попытке отправки сообщения по рассылке. Она содержит информацию о том, была ли попытка успешной, когда она произошла и какой ответ вернул почтовый сервер.

Инициация отправки.
Попытка рассылки создается каждый раз, когда запускается процесс отправки сообщений для конкретной рассылки.

Определение получателей.
Список клиентов, которым должно быть отправлено сообщение, определяется из выбранных клиентов для данной рассылки.

Отправка сообщения:
Для каждого клиента из списка выполняется отправка письма с помощью функции 
send_mail()
 из Django.
В случае успешной отправки письма создается запись в модели 
Попытка_рассылки
 со статусом «успешно».
В случае ошибки отправки, например из-за недоступности почтового сервера, создается запись со статусом «не успешно» и текстом ошибки в поле «Ответ почтового сервера».
Сбор статистики.
Каждая попытка отправки письма фиксируется, что позволяет отслеживать успешные и неуспешные попытки, а также общее количество попыток.

Анализ и отчетность.
Данные о попытках рассылок используются для формирования статистики и отчетности, предоставляя пользователю информацию о статусе и результатах его рассылок.


Модель «Попытка рассылки»:

Дата и время попытки (datetime).
Статус (строка: 
'Успешно'
, 
'Не успешно'
).
Ответ почтового сервера (текст).
Рассылка (внешний ключ на модель «Рассылка»).
6. Главная страница
На главной странице должно отображаться количество всех рассылок, количество активных рассылок (со статусом 
'Запущена'
) и количество уникальных получателей.

ЧАСТЬ 2. Расширение функциональности
7. Регистрация и аутентификация пользователей
Реализовать систему регистрации и аутентификации пользователей.
Пользователи должны иметь возможность зарегистрироваться на сайте, подтвердив свой email.
Должна быть реализована функция входа и выхода из системы.
Необходимо предусмотреть возможность восстановления пароля.
8. Статистика и отчеты
Необходимо собирать и отображать информацию о количестве успешных/неуспешных попыток рассылок пользователя и количестве отправленных сообщений.

9. Ограничение доступа
Пользователи могут управлять только своими рассылками и клиентами.
Менеджеры могут просматривать все рассылки и клиентов, но не могут редактировать или удалять чужие данные.
Описание ролей и прав доступа:

Пользователь
Создание, просмотр, редактирование и удаление своих клиентов и рассылок.
Просмотр статистики по своим рассылкам.
Менеджер
Просмотр всех клиентов и рассылок.
Просмотр списка пользователей сервиса.
Блокировка пользователей сервиса.
Отключение рассылок.
10. Кеширование
Настроить серверное и клиентское кеширование для повышения производительности.

* Дополнительные задания
1. Автоматическая отправка сообщений по расписанию
Реализовать автоматическую отправку рассылок по расписанию через библиотеку 
django-apscheduler
 и написать скрипт для автоматической отправки сообщений по расписанию.

2. Логирование
Реализовать логирование основных событий и ошибок в работе приложения.

Дополнительные задания, помеченные звездочкой, желательно, но не обязательно выполнять.