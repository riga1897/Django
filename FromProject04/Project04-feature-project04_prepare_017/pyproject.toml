[build-system]
requires = ["poetry-core>=2.2.1,<3.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "project04"
version = "0.1.0"
description = "Сервис управления рассылками"
authors = ["Ri Ga <riga1897@yandex.ru>"]
readme = "README.md"
# packages = [{include = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
requests = "^2.32.4"
poetry-core = ">=2.2.1"
psycopg2-binary = "^2.9.10"
django = "^5.2.7"
python-dotenv = "^1.1.1"
pillow = "==11.3.0"
ipython = "==9.6.0"
asttokens = "==3.0.0"
decorator = "==5.2.1"
executing = "==2.2.1"
ipython-pygments-lexers = "==1.1.1"
jedi = "==0.19.2"
matplotlib-inline = "==0.1.7"
parso = "==0.8.5"
prompt-toolkit = "==3.0.52"
pure-eval = "==0.2.3"
stack-data = "==0.6.3"
traitlets = "==5.14.3"
wcwidth = "==0.2.14"
django-stubs = "^5.2.5"
pydantic = "^2.10.6"
pydantic-settings = "^2.8.2"
pytest-xdist = "^3.8.0"
pre-commit = "^4.3.0"
pytest-django = "^4.11.1"
django-apscheduler = "^0.7.0"
pytest-env = "^1.1.5"
django-stub = "^0.1"


[tool.poetry.group.lint.dependencies]
flake8 = "^7.3.0"
mypy = "^1.16.1"
black = "^25.1.0"
isort = "^6.0.1"
ruff = "^0.13.1"

[tool.poetry.group.tests.dependencies]
pytest = "^8.4.2"
pytest-mock = "^3.15.0"
pytest-cov = "^7.0.0"
pytest-django = "^4.9.0"
pytest-xdist = "^3.6.1"
autopep8 = "^2.3.2"
mypy = "^1.17.1"
black = "^25.1.0"
flake8 = "^7.3.0"
isort = "^6.0.1"
pydocstyle = "^6.3.0"
factory-boy = "^3.3.1"

[tool.poetry.scripts]
lint = "scripts.lint:main"

[tool.black]
line-length = 119
exclude = '''
(
    /(
        \.eggs.py
    | \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    )/
    | foo.py
)
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
check_untyped_defs = true
ignore_missing_imports = true

exclude = [
    "^tests/",
    "^migrations/",
    "^attached_assets/",
    "\\.venv",
    "\\.idea"
]

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[[tool.mypy.overrides]]
module = "*.migrations.*"
ignore_errors = true

[tool.isort]
# максимальная длина строки
line_length = 119
# Совместимость с black
profile = "black"

[tool.ruff]
line-length = 119
preview = true

# Исключить ненужные директории и файлы
exclude = [
    ".venv",
    ".git",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    "*.egg-info",
    "migrations",
    "attached_assets",
    ".local",
    ".idea",
    "build",
    "dist",
]

# Всегда соблюдать правила exclude
force-exclude = true

# Linter-specific settings
[tool.ruff.lint]
# Выбранные правила проверки (без I - сортировку импортов делает isort)
select = [
    "B",    # flake8-bugbear (потенциальные баги)
    "E",    # pycodestyle errors (стиль кода)
    "F",    # pyflakes (ошибки импорта и неиспользуемые переменные)
    "C90",  # mccabe (сложность кода)
    "UP",   # pyupgrade (современный синтаксис Python)
    "SIM",  # flake8-simplify (упрощения кода)
]

# Автоматически исправляемые правила (безопасные)
fixable = ["ALL"]
unfixable = []

# Игнорирование для конкретных файлов
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Неиспользуемые импорты в __init__.py это нормально

[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "config.settings_test"
# filterwarnings = [
#     "error",  # Превращаем все предупреждения в ошибки (строго)
#     # ИЛИ используйте "ignore" чтобы игнорировать все предупреждения
#     # "ignore::DeprecationWarning",  # Игнорировать устаревшие функции
#     # "ignore::PendingDeprecationWarning",
# ]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--reuse-db",
    "--cov=apps",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--tb=short",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.pytest_env]
# Переменная для предотвращения запуска APScheduler во время тестов
# Устанавливается ДО инициализации Django приложений
PYTEST_RUNNING = "1"

[tool.coverage.run]
omit = [
    "*/migrations/*",
    "*/tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]
