from typing import Any

from django.contrib.auth.models import Group
from django.core.management import call_command
from django.core.management.base import BaseCommand

from users.models import User


class Command(BaseCommand):
    help = "–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–∫—Å—Ç—É—Ä –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞"

    def add_arguments(self, parser: Any) -> None:
        parser.add_argument(
            "--users",
            action="store_true",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        )
        parser.add_argument(
            "--groups",
            action="store_true",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç—å –≥—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
        )
        parser.add_argument(
            "--data",
            action="store_true",
            help="–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ–≤–∞—Ä—ã, –±–ª–æ–≥-–ø–æ—Å—Ç—ã)",
        )

    def handle(self, *args: Any, **options: Any) -> None:
        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã —Ñ–ª–∞–≥–∏ - –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å—ë
        load_all = not any([options["users"], options["groups"], options["data"]])

        if options["users"] or load_all:
            self._load_system_user()

        if options["groups"] or load_all:
            self._load_groups()

        if options["data"] or load_all:
            self._load_data()

        self.stdout.write(self.style.SUCCESS("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"))  # type: ignore[attr-defined]

    def _load_system_user(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        system_email = "deleted@system.user"

        if User.objects.filter(email=system_email).exists():  # type: ignore[attr-defined]
            self.stdout.write(
                self.style.WARNING(  # type: ignore[attr-defined]
                    f"‚è≠Ô∏è  –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{system_email}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
                )
            )
            return

        self.stdout.write("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        call_command("loaddata", "users/fixtures/system_user.json", verbosity=0)
        self.stdout.write(
            self.style.SUCCESS(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{system_email}' –∑–∞–≥—Ä—É–∂–µ–Ω")  # type: ignore[attr-defined]
        )

    def _load_groups(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        required_groups = ["–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "–ö–æ–Ω—Ç–µ–Ω—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä"]
        existing_groups = Group.objects.filter(name__in=required_groups).values_list(  # type: ignore[attr-defined]
            "name", flat=True
        )

        if set(existing_groups) == set(required_groups):
            self.stdout.write(self.style.WARNING("‚è≠Ô∏è  –ì—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"))  # type: ignore[attr-defined]
            return

        self.stdout.write("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        call_command("loaddata", "marketplace/fixtures/groups_and_permissions.json", verbosity=0)
        self.stdout.write(
            self.style.SUCCESS("‚úÖ –ì—Ä—É–ø–ø—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")  # type: ignore[attr-defined]
        )

    def _load_data(self) -> None:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ–≤–∞—Ä—ã, –±–ª–æ–≥-–ø–æ—Å—Ç—ã)"""
        from blog.models import BlogPost
        from marketplace.models import Category, Product

        has_data = (
            Category.objects.exists()  # type: ignore[attr-defined]
            or Product.objects.exists()  # type: ignore[attr-defined]
            or BlogPost.objects.exists()  # type: ignore[attr-defined]
        )

        if has_data:
            self.stdout.write(
                self.style.WARNING("‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/—Ç–æ–≤–∞—Ä—ã/–ø–æ—Å—Ç—ã")  # type: ignore[attr-defined]
            )
            response = input("   –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ? –≠—Ç–æ –¥–æ–±–∞–≤–∏—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ (y/N): ")
            if response.lower() != "y":
                self.stdout.write(self.style.WARNING("‚è≠Ô∏è  –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—â–µ–Ω–∞"))  # type: ignore[attr-defined]
                return

        self.stdout.write("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ–≤–∞—Ä—ã, –±–ª–æ–≥-–ø–æ—Å—Ç—ã)...")
        call_command("loaddata", "marketplace/fixtures/data.json", verbosity=0)
        self.stdout.write(
            self.style.SUCCESS("‚úÖ –î–∞–Ω–Ω—ã–µ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–æ–≤–∞—Ä—ã, –±–ª–æ–≥-–ø–æ—Å—Ç—ã) –∑–∞–≥—Ä—É–∂–µ–Ω—ã")  # type: ignore[attr-defined]
        )
